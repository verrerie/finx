name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: read

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation
      
      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get the latest tag, or default to v0.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"
      
      - name: Determine version bump
        id: version_bump
        run: |
          # Get commits since last tag
          LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
          
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s")
          fi
          
          echo "Commits since last tag:"
          echo "$COMMITS"
          
          # Determine bump type based on conventional commits
          BUMP_TYPE="patch"
          
          # Check for BREAKING CHANGE or major version indicators
          if echo "$COMMITS" | grep -qE "BREAKING CHANGE|^[a-z]+!:"; then
            BUMP_TYPE="major"
          # Check for feat: (new features = minor)
          elif echo "$COMMITS" | grep -qE "^feat(\(.*\))?:"; then
            BUMP_TYPE="minor"
          # Everything else is patch (fix, docs, chore, refactor, etc.)
          fi
          
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Bump type: $BUMP_TYPE"
      
      - name: Calculate new version
        id: calculate_version
        run: |
          LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
          BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"
          
          # Remove 'v' prefix for calculation
          VERSION=${LATEST_TAG#v}
          
          # Split version into components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Bump version based on type
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
      
      - name: Generate changelog
        id: changelog
        run: |
          LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
          NEW_VERSION="${{ steps.calculate_version.outputs.new_version }}"
          
          # Get commits since last tag
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse)
          fi
          
          # Group commits by type
          FEATURES=$(echo "$COMMITS" | grep "^- feat" || true)
          FIXES=$(echo "$COMMITS" | grep "^- fix" || true)
          DOCS=$(echo "$COMMITS" | grep "^- docs" || true)
          REFACTOR=$(echo "$COMMITS" | grep "^- refactor" || true)
          CHORE=$(echo "$COMMITS" | grep "^- chore" || true)
          CI=$(echo "$COMMITS" | grep "^- ci" || true)
          STYLE=$(echo "$COMMITS" | grep "^- style" || true)
          OTHER=$(echo "$COMMITS" | grep -v "^- \(feat\|fix\|docs\|refactor\|chore\|ci\|style\)" || true)
          
          # Build changelog
          CHANGELOG="## What's Changed\n\n"
          
          if [ -n "$FEATURES" ]; then
            CHANGELOG+="### ✨ Features\n$FEATURES\n\n"
          fi
          
          if [ -n "$FIXES" ]; then
            CHANGELOG+="### 🐛 Bug Fixes\n$FIXES\n\n"
          fi
          
          if [ -n "$DOCS" ]; then
            CHANGELOG+="### 📚 Documentation\n$DOCS\n\n"
          fi
          
          if [ -n "$REFACTOR" ]; then
            CHANGELOG+="### ♻️ Refactoring\n$REFACTOR\n\n"
          fi
          
          if [ -n "$CI" ]; then
            CHANGELOG+="### 🔧 CI/CD\n$CI\n\n"
          fi
          
          if [ -n "$STYLE" ]; then
            CHANGELOG+="### 💄 Style\n$STYLE\n\n"
          fi
          
          if [ -n "$CHORE" ]; then
            CHANGELOG+="### 🔨 Chores\n$CHORE\n\n"
          fi
          
          if [ -n "$OTHER" ]; then
            CHANGELOG+="### Other Changes\n$OTHER\n\n"
          fi
          
          CHANGELOG+="---\n\n**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...${NEW_VERSION}"
          
          # Save changelog to file for multiline handling
          echo -e "$CHANGELOG" > /tmp/changelog.md
          
          echo "Changelog generated"
      
      - name: Create tag
        run: |
          NEW_VERSION="${{ steps.calculate_version.outputs.new_version }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git tag -a $NEW_VERSION -m "Release $NEW_VERSION"
          git push origin $NEW_VERSION
          
          echo "Created and pushed tag: $NEW_VERSION"
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.calculate_version.outputs.new_version }}
          name: ${{ steps.calculate_version.outputs.new_version }}
          body_path: /tmp/changelog.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Release summary
        run: |
          NEW_VERSION="${{ steps.calculate_version.outputs.new_version }}"
          LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
          BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"
          
          echo "### ✅ Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous version**: $LATEST_TAG" >> $GITHUB_STEP_SUMMARY
          echo "- **New version**: $NEW_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Bump type**: $BUMP_TYPE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View Release](https://github.com/${{ github.repository }}/releases/tag/$NEW_VERSION)" >> $GITHUB_STEP_SUMMARY

